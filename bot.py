import logging
import sqlite3
import os
import asyncio
from aiogram import Bot, Dispatcher
from telethon import TelegramClient, events
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

API_ID = int(os.getenv("API_ID"))  # API ID –∏–∑ my.telegram.org
API_HASH = os.getenv("API_HASH")  # API HASH –∏–∑ my.telegram.org
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

# üîπ –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ `.env`
KEYWORDS = set(os.getenv("KEYWORDS", "").split(","))  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
MONITORED_CHANNELS = list(map(int, os.getenv("MONITORED_CHANNELS", "").split(",")))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon
client = TelegramClient("my_bot_session", API_ID, API_HASH)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
conn = sqlite3.connect("messages.db")
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS processed_messages (
        message_id INTEGER PRIMARY KEY
    )
""")
conn.commit()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def is_duplicate(message_id):
    c.execute("SELECT 1 FROM processed_messages WHERE message_id = ?", (message_id,))
    return c.fetchone() is not None

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def save_message(message_id):
    c.execute("INSERT INTO processed_messages (message_id) VALUES (?)", (message_id,))
    conn.commit()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
@client.on(events.NewMessage(chats=MONITORED_CHANNELS))
async def handler(event):
    message = event.message
    if message.text:
        lower_text = message.text.lower()
        if any(keyword.lower() in lower_text for keyword in KEYWORDS) and not is_duplicate(message.id):
            save_message(message.id)
            await bot.send_message(CHANNEL_ID, message.text, parse_mode="HTML")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã), –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö
            if message.media:
                await bot.send_file(CHANNEL_ID, message.media)

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await client.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
