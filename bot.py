import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from dotenv import load_dotenv
from aiogram.exceptions import TelegramNetworkError  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
if not TARGET_CHANNEL_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TARGET_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

TARGET_CHANNEL_ID = int(TARGET_CHANNEL_ID)

# üîπ –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORED_CHANNELS = {
    "SCAIH Fund": -1001149489055,
    "seamensclubstudio": -1002250547491
}

# üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = ["Trade"]

bot = Bot(token=TOKEN)
dp = Dispatcher()

async def filter_channel_messages(message: types.Message):
    """–§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"""
    print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {message.chat.id}: {message.text if message.text else '[–ù–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}")

    if message.chat.id not in MONITORED_CHANNELS.values():
        return

    text = message.text.lower() if message.text else ""
    for keyword in KEYWORDS:
        if keyword.lower() in text:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
            chat_info = f"üì¢ –ù–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ {message.chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"
            await bot.send_message(TARGET_CHANNEL_ID, f"{chat_info}\n{text}")
            return

dp.message.register(filter_channel_messages, F.text)

async def start_bot():
    while True:
        try:
            logging.basicConfig(level=logging.INFO)
            await dp.start_polling(bot)
        except TelegramNetworkError:  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
            print("üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"üî• –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(start_bot())
