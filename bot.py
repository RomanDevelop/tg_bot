import asyncio
import logging
import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient, events
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

# üîπ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–∑ .env)
MONITORED_CHANNELS = list(map(int, os.getenv("MONITORED_CHANNELS").split(",")))

# üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∏–∑ .env)
KEYWORDS = os.getenv("KEYWORDS").split(",")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π Telegram-–∞–∫–∫–∞—É–Ω—Ç)
client = TelegramClient("my_bot_session", API_ID, API_HASH)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
conn = sqlite3.connect("messages.db")
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS processed_messages (
        message_id INTEGER PRIMARY KEY
    )
""")
conn.commit()

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def is_duplicate(message_id):
    c.execute("SELECT 1 FROM processed_messages WHERE message_id = ?", (message_id,))
    return c.fetchone() is not None

# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def save_message(message_id):
    c.execute("INSERT INTO processed_messages (message_id) VALUES (?)", (message_id,))
    conn.commit()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=MONITORED_CHANNELS))
async def handler(event):
    message = event.message
    text = message.text or ""
    chat_id = message.chat_id
    message_id = message.id

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    contains_keyword = any(keyword.lower() in text.lower() for keyword in KEYWORDS)

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
    is_audio = message.audio is not None

    # üîπ –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ —ç—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if not contains_keyword and not is_audio:
        return

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_duplicate(message.id):
        return

    # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
    save_message(message.id)
    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª): {text[:50]}...")

    # üîπ –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
    original_post_url = f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"  # –£–±–∏—Ä–∞–µ–º "-100" –∏–∑ chat_id

    # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", url=original_post_url)]
    ])

    try:
        # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if text:
            await bot.send_message(
                CHANNEL_ID,
                f"üì¢ –ù–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞:\n{text}",
                parse_mode="HTML",
                reply_markup=keyboard  # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            )
            logging.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")

        # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if is_audio:
            await bot.send_file(CHANNEL_ID, message.audio, caption="üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª:", reply_markup=keyboard)
            logging.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    while True:
        try:
            await client.start()  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å–∏—Ç –∫–æ–¥)
            logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"üî• –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(run_bot())
