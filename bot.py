import asyncio
import logging
import os
import requests
from bs4 import BeautifulSoup
from aiogram import Bot
from dotenv import load_dotenv
from datetime import datetime
import pytz

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TARGET_CHANNEL_ID = os.getenv("TARGET_CHANNEL_ID")  # –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
if not TARGET_CHANNEL_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TARGET_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

TARGET_CHANNEL_ID = int(TARGET_CHANNEL_ID)

# üîπ URL –≤–µ–±-–≤–µ—Ä—Å–∏–∏ Telegram –∫–∞–Ω–∞–ª–∞ UTEX
TELEGRAM_URL = "https://t.me/s/utex_exchange"

# üîπ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –£–∫—Ä–∞–∏–Ω—ã (UTC+2)
UKRAINE_TZ = pytz.timezone("Europe/Kiev")

bot = Bot(token=TOKEN)

# –•—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
sent_messages = set()

def fetch_latest_posts():
    """–ü–∞—Ä—Å–∏—Ç –≤–µ–±-–≤–µ—Ä—Å–∏—é Telegram-–∫–∞–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å 'Trade'."""
    try:
        response = requests.get(TELEGRAM_URL)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Telegram-—Å—Ç—Ä–∞–Ω–∏—Ü—ã! –ö–æ–¥: {response.status_code}")
            return []
        
        soup = BeautifulSoup(response.text, "html.parser")
        posts = soup.find_all("div", class_="tgme_widget_message_text")
        
        new_posts = []
        for post in posts:
            text = post.get_text()
            if "Trade" in text or "trade" in text:
                post_id = hash(text)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
                if post_id not in sent_messages:
                    new_posts.append((post_id, text))
                    sent_messages.add(post_id)
        
        return new_posts
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

async def fetch_and_send():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å 'Trade' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram-–∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è)."""
    now = datetime.now(UKRAINE_TZ).time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –£–∫—Ä–∞–∏–Ω–µ
    start_time = datetime.strptime("12:00", "%H:%M").time()
    end_time = datetime.strptime("22:00", "%H:%M").time()

    if start_time <= now <= end_time:
        print("‚úÖ –í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã...")
        new_posts = fetch_latest_posts()
        for post_id, text in new_posts:
            message = f"üì¢ –ù–æ–≤–æ—Å—Ç—å –∏–∑ UTEX:\n{text}"
            await bot.send_message(TARGET_CHANNEL_ID, message)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
    else:
        print("‚è≥ –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –±–æ—Ç –∂–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.")

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 12:00 –¥–æ 22:00 (–£–∫—Ä–∞–∏–Ω–∞)."""
    while True:
        await fetch_and_send()
        print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        await asyncio.sleep(1800)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1800 —Å–µ–∫—É–Ω–¥ (30 –º–∏–Ω—É—Ç)

if __name__ == "__main__":
    asyncio.run(main())
